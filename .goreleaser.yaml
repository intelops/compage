# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 1
project_name: compage

before:
  hooks:
    - go mod tidy
    - go mod download
    - git submodule update --init --recursive

builds:
  - env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    flags:
      # trims path
      - -trimpath
    ldflags:
      #   # CommitDate makes the release reproducible
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{ .CommitDate }}

checksum:
  name_template: 'checksums.txt'

source:
  enabled: true

sboms:
  - artifacts: archive
  - id: source # Two different sbom configurations need two different IDs
    artifacts: source

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip


# signs the checksum file
signs:
  - cmd: cosign
    certificate: '${artifact}.pem'
    args:
      - sign-blob
      - '--output-certificate=${certificate}'
      - '--output-signature=${signature}'
      - '${artifact}'
      - "--yes"
    artifacts: checksum
    output: true

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

nfpms:
  - package_name: compage
    homepage: https://github.com/intelops/compage/
    maintainer: Mahendra B <mahendra.b@intelops.dev>
    description: |-
      Compage installer package. CLI application to generate code for rest and grpc.
    formats:
      - rpm
      - deb

blobs:
  - extra_files:
    # Include specific files or directories from submodules
    - templates/compage-template-go/**
    - templates/compage-template-java/**
    - templates/compage-template-javascript/**
    - templates/compage-template-python/**
    - templates/compage-template-typescript/**
    - templates/compage-template-rust/**
    - templates/compage-template-ruby/**