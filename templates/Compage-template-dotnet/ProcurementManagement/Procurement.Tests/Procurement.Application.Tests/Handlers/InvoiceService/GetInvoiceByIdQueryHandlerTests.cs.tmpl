using AutoMapper;
using Moq;
using Procurement.Application.Handlers.{{.CapsResourceNameSingular}}Service;
using Procurement.Application.Queries.{{.CapsResourceNameSingular}}Service;
using Procurement.Application.Responses;
using Procurement.Core.Entities;
using Procurement.Core.Repositories;

namespace Procurement.Application.Tests.Handlers.{{.CapsResourceNameSingular}}Service
{
    public class Get{{.CapsResourceNameSingular}}ByIdQueryHandlerTests
    {

        [Fact]
        public async Task Handle_ReturnsResponse()
        {
            // Arrange
            var mapperConfig = new MapperConfiguration(cfg =>
            {
                cfg.CreateMap<{{.CapsResourceNameSingular}}, {{.CapsResourceNameSingular}}Response>();
            });

            var mapper = new Mapper(mapperConfig);

            var Id = 1; 
            var obj = new {{.CapsResourceNameSingular}} { Id = Id, /* other properties */ };

            var RepositoryMock = new Mock<I{{.CapsResourceNameSingular}}Repository>();
            RepositoryMock.Setup(repo => repo.GetByIdAsync(Id)).ReturnsAsync(obj);

            var query = new Get{{.CapsResourceNameSingular}}ByIdQuery(Id);
            var handler = new Get{{.CapsResourceNameSingular}}ByIdQueryHandler(RepositoryMock.Object, mapper);

            // Act
            var result = await handler.Handle(query, CancellationToken.None);

            // Assert
            Assert.NotNull(result);
            Assert.IsType<{{.CapsResourceNameSingular}}Response>(result);
            // Add assertions to check the mapping and properties 
            Assert.Equal(Id, result.Id);
            // Add more assertions as needed
        }
    }
}
