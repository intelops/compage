using AutoMapper;
using MediatR;
using Procurement.Application.Queries.{{.CapsResourceNameSingular}}Service;
using Procurement.Application.Responses;
using Procurement.Core.Repositories;

namespace Procurement.Application.Handlers.{{.CapsResourceNameSingular}}Service
{

    public class Get{{.CapsResourceNameSingular}}ByIdQueryHandler : IRequestHandler<Get{{.CapsResourceNameSingular}}ByIdQuery, {{.CapsResourceNameSingular}}Response>
    {
        private readonly I{{.CapsResourceNameSingular}}Repository _{{.SmallResourceNameSingular}}Repository;
        private readonly IMapper _mapper;
        public Get{{.CapsResourceNameSingular}}ByIdQueryHandler(I{{.CapsResourceNameSingular}}Repository {{.SmallResourceNameSingular}}Repository, IMapper mapper)
        {
            _{{.SmallResourceNameSingular}}Repository = {{.SmallResourceNameSingular}}Repository;
            _mapper = mapper;
        }
        public async Task<{{.CapsResourceNameSingular}}Response> Handle(Get{{.CapsResourceNameSingular}}ByIdQuery request, CancellationToken cancellationToken)
        {
            var generatedOrder = await _{{.SmallResourceNameSingular}}Repository.GetByIdAsync(request.id);
            var orderEntity = _mapper.Map<{{.CapsResourceNameSingular}}Response>(generatedOrder);
            return orderEntity;
        }
    }
}
